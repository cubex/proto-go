// Code generated by protoc-gen-go.
// source: config.proto
// DO NOT EDIT!

/*
Package config is a generated protocol buffer package.

It is generated from these files:
	config.proto

It has these top-level messages:
	ConfigSetResponse
	ConfigRequest
	ConfigItem
	ConfigResponse
*/
package config

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConfigSetResponse struct {
	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	Applied  bool   `protobuf:"varint,2,opt,name=applied" json:"applied,omitempty"`
}

func (m *ConfigSetResponse) Reset()                    { *m = ConfigSetResponse{} }
func (m *ConfigSetResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigSetResponse) ProtoMessage()               {}
func (*ConfigSetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConfigSetResponse) GetConfigId() string {
	if m != nil {
		return m.ConfigId
	}
	return ""
}

func (m *ConfigSetResponse) GetApplied() bool {
	if m != nil {
		return m.Applied
	}
	return false
}

type ConfigRequest struct {
	ConfigIds []string `protobuf:"bytes,1,rep,name=config_ids,json=configIds" json:"config_ids,omitempty"`
}

func (m *ConfigRequest) Reset()                    { *m = ConfigRequest{} }
func (m *ConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfigRequest) ProtoMessage()               {}
func (*ConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConfigRequest) GetConfigIds() []string {
	if m != nil {
		return m.ConfigIds
	}
	return nil
}

type ConfigItem struct {
	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId" json:"config_id,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ConfigItem) Reset()                    { *m = ConfigItem{} }
func (m *ConfigItem) String() string            { return proto.CompactTextString(m) }
func (*ConfigItem) ProtoMessage()               {}
func (*ConfigItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ConfigItem) GetConfigId() string {
	if m != nil {
		return m.ConfigId
	}
	return ""
}

func (m *ConfigItem) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ConfigResponse struct {
	Items []*ConfigItem `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ConfigResponse) Reset()                    { *m = ConfigResponse{} }
func (m *ConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfigResponse) ProtoMessage()               {}
func (*ConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ConfigResponse) GetItems() []*ConfigItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*ConfigSetResponse)(nil), "config.ConfigSetResponse")
	proto.RegisterType((*ConfigRequest)(nil), "config.ConfigRequest")
	proto.RegisterType((*ConfigItem)(nil), "config.ConfigItem")
	proto.RegisterType((*ConfigResponse)(nil), "config.ConfigResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Config service

type ConfigClient interface {
	Set(ctx context.Context, in *ConfigItem, opts ...grpc.CallOption) (*ConfigSetResponse, error)
	Retrieve(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type configClient struct {
	cc *grpc.ClientConn
}

func NewConfigClient(cc *grpc.ClientConn) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) Set(ctx context.Context, in *ConfigItem, opts ...grpc.CallOption) (*ConfigSetResponse, error) {
	out := new(ConfigSetResponse)
	err := grpc.Invoke(ctx, "/config.Config/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) Retrieve(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := grpc.Invoke(ctx, "/config.Config/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Config service

type ConfigServer interface {
	Set(context.Context, *ConfigItem) (*ConfigSetResponse, error)
	Retrieve(context.Context, *ConfigRequest) (*ConfigResponse, error)
}

func RegisterConfigServer(s *grpc.Server, srv ConfigServer) {
	s.RegisterService(&_Config_serviceDesc, srv)
}

func _Config_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.Config/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Set(ctx, req.(*ConfigItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config.Config/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).Retrieve(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Config_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _Config_Set_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Config_Retrieve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}

func init() { proto.RegisterFile("config.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x89, 0xa5, 0x31, 0x3b, 0xfe, 0x01, 0x17, 0x95, 0x58, 0x11, 0xc2, 0x9e, 0x72, 0x31,
	0x81, 0xea, 0x45, 0x2f, 0x82, 0x9e, 0xea, 0x71, 0x7b, 0xf3, 0x22, 0x4d, 0x32, 0xc6, 0x85, 0xa6,
	0x1b, 0xbb, 0x93, 0xa2, 0xdf, 0x5e, 0xd8, 0x49, 0xd4, 0x8a, 0x78, 0xcb, 0x7b, 0x79, 0xf3, 0x7e,
	0x3b, 0xbb, 0xb0, 0x5f, 0xda, 0xd5, 0x8b, 0xa9, 0xb3, 0x76, 0x6d, 0xc9, 0xca, 0x90, 0x95, 0x7a,
	0x84, 0xa3, 0x07, 0xff, 0x35, 0x47, 0xd2, 0xe8, 0x5a, 0xbb, 0x72, 0x28, 0xcf, 0x41, 0xf0, 0xef,
	0x67, 0x53, 0xc5, 0x41, 0x12, 0xa4, 0x42, 0x47, 0x6c, 0xcc, 0x2a, 0x19, 0xc3, 0xee, 0xa2, 0x6d,
	0x97, 0x06, 0xab, 0x78, 0x27, 0x09, 0xd2, 0x48, 0x0f, 0x52, 0x65, 0x70, 0xc0, 0x5d, 0x1a, 0xdf,
	0x3a, 0x74, 0x24, 0x2f, 0x00, 0xbe, 0x7a, 0x5c, 0x1c, 0x24, 0xa3, 0x54, 0x68, 0x31, 0x14, 0x39,
	0x75, 0x07, 0xc0, 0xf9, 0x19, 0x61, 0xf3, 0x3f, 0xf4, 0x18, 0xc6, 0x9b, 0xc5, 0xb2, 0x43, 0x8f,
	0x14, 0x9a, 0x85, 0xba, 0x85, 0xc3, 0x01, 0xd8, 0x9f, 0x3c, 0x85, 0xb1, 0x21, 0x6c, 0x18, 0xb6,
	0x37, 0x95, 0x59, 0xbf, 0xf4, 0x37, 0x47, 0x73, 0x60, 0xfa, 0x01, 0x21, 0x9b, 0xf2, 0x1a, 0x46,
	0x73, 0x24, 0xf9, 0x47, 0x76, 0x72, 0xb6, 0xed, 0xfd, 0xbc, 0xa3, 0x1b, 0x88, 0x34, 0xd2, 0xda,
	0xe0, 0x06, 0xe5, 0xc9, 0x76, 0xac, 0x5f, 0x7f, 0x72, 0xfa, 0xdb, 0xe6, 0xd1, 0x7b, 0xf5, 0x94,
	0xd4, 0x86, 0x5e, 0xbb, 0x22, 0x2b, 0x6d, 0x93, 0x97, 0x5d, 0x81, 0xef, 0xb9, 0x7f, 0x95, 0xcb,
	0xda, 0xe6, 0x3c, 0x52, 0x84, 0xde, 0xb8, 0xfa, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x18, 0xf5,
	0x09, 0xb6, 0x01, 0x00, 0x00,
}
