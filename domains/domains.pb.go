// Code generated by protoc-gen-go.
// source: domains.proto
// DO NOT EDIT!

/*
Package domains is a generated protocol buffer package.

It is generated from these files:
	domains.proto

It has these top-level messages:
	LookupRequest
	GetDomainsRequest
	CreateRequest
	DomainResponse
	DomainsResponse
	VerifyRequest
	DomainServiceResponse
	SetServiceRequest
	ServiceRequest
	DomainServicesResponse
*/
package domains

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VerificationMode int32

const (
	VerificationMode_DNS    VerificationMode = 0
	VerificationMode_FILE   VerificationMode = 1
	VerificationMode_MANUAL VerificationMode = 2
)

var VerificationMode_name = map[int32]string{
	0: "DNS",
	1: "FILE",
	2: "MANUAL",
}
var VerificationMode_value = map[string]int32{
	"DNS":    0,
	"FILE":   1,
	"MANUAL": 2,
}

func (x VerificationMode) String() string {
	return proto.EnumName(VerificationMode_name, int32(x))
}
func (VerificationMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DomainServiceSchema int32

const (
	DomainServiceSchema_HTTP  DomainServiceSchema = 0
	DomainServiceSchema_HTTPS DomainServiceSchema = 1
)

var DomainServiceSchema_name = map[int32]string{
	0: "HTTP",
	1: "HTTPS",
}
var DomainServiceSchema_value = map[string]int32{
	"HTTP":  0,
	"HTTPS": 1,
}

func (x DomainServiceSchema) String() string {
	return proto.EnumName(DomainServiceSchema_name, int32(x))
}
func (DomainServiceSchema) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LookupRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LookupRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type GetDomainsRequest struct {
}

func (m *GetDomainsRequest) Reset()                    { *m = GetDomainsRequest{} }
func (m *GetDomainsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDomainsRequest) ProtoMessage()               {}
func (*GetDomainsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CreateRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type DomainResponse struct {
	Domain           string                     `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Verification     string                     `protobuf:"bytes,2,opt,name=verification" json:"verification,omitempty"`
	VerificationMode string                     `protobuf:"bytes,3,opt,name=verification_mode,json=verificationMode" json:"verification_mode,omitempty"`
	IsVerified       string                     `protobuf:"bytes,4,opt,name=is_verified,json=isVerified" json:"is_verified,omitempty"`
	DateVerified     *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=date_verified,json=dateVerified" json:"date_verified,omitempty"`
}

func (m *DomainResponse) Reset()                    { *m = DomainResponse{} }
func (m *DomainResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainResponse) ProtoMessage()               {}
func (*DomainResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DomainResponse) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DomainResponse) GetVerification() string {
	if m != nil {
		return m.Verification
	}
	return ""
}

func (m *DomainResponse) GetVerificationMode() string {
	if m != nil {
		return m.VerificationMode
	}
	return ""
}

func (m *DomainResponse) GetIsVerified() string {
	if m != nil {
		return m.IsVerified
	}
	return ""
}

func (m *DomainResponse) GetDateVerified() *google_protobuf.Timestamp {
	if m != nil {
		return m.DateVerified
	}
	return nil
}

type DomainsResponse struct {
	Domains map[string]*DomainResponse `protobuf:"bytes,1,rep,name=domains" json:"domains,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DomainsResponse) Reset()                    { *m = DomainsResponse{} }
func (m *DomainsResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainsResponse) ProtoMessage()               {}
func (*DomainsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DomainsResponse) GetDomains() map[string]*DomainResponse {
	if m != nil {
		return m.Domains
	}
	return nil
}

type VerifyRequest struct {
	Domain string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
}

func (m *VerifyRequest) Reset()                    { *m = VerifyRequest{} }
func (m *VerifyRequest) String() string            { return proto.CompactTextString(m) }
func (*VerifyRequest) ProtoMessage()               {}
func (*VerifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VerifyRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

type DomainServiceResponse struct {
	Domain         string                `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Subdomain      string                `protobuf:"bytes,2,opt,name=subdomain" json:"subdomain,omitempty"`
	DefaultSchema  DomainServiceSchema   `protobuf:"varint,3,opt,name=default_schema,json=defaultSchema,enum=domains.DomainServiceSchema" json:"default_schema,omitempty"`
	AvailbleSchema []DomainServiceSchema `protobuf:"varint,4,rep,packed,name=availble_schema,json=availbleSchema,enum=domains.DomainServiceSchema" json:"availble_schema,omitempty"`
	HandlerGaid    string                `protobuf:"bytes,5,opt,name=handler_gaid,json=handlerGaid" json:"handler_gaid,omitempty"`
	IsEnabled      bool                  `protobuf:"varint,6,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (m *DomainServiceResponse) Reset()                    { *m = DomainServiceResponse{} }
func (m *DomainServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainServiceResponse) ProtoMessage()               {}
func (*DomainServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DomainServiceResponse) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *DomainServiceResponse) GetSubdomain() string {
	if m != nil {
		return m.Subdomain
	}
	return ""
}

func (m *DomainServiceResponse) GetDefaultSchema() DomainServiceSchema {
	if m != nil {
		return m.DefaultSchema
	}
	return DomainServiceSchema_HTTP
}

func (m *DomainServiceResponse) GetAvailbleSchema() []DomainServiceSchema {
	if m != nil {
		return m.AvailbleSchema
	}
	return nil
}

func (m *DomainServiceResponse) GetHandlerGaid() string {
	if m != nil {
		return m.HandlerGaid
	}
	return ""
}

func (m *DomainServiceResponse) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

type SetServiceRequest struct {
	Domain        string              `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Subdomain     string              `protobuf:"bytes,2,opt,name=subdomain" json:"subdomain,omitempty"`
	HandlerGaid   string              `protobuf:"bytes,3,opt,name=handler_gaid,json=handlerGaid" json:"handler_gaid,omitempty"`
	DefaultSchema DomainServiceSchema `protobuf:"varint,4,opt,name=default_schema,json=defaultSchema,enum=domains.DomainServiceSchema" json:"default_schema,omitempty"`
}

func (m *SetServiceRequest) Reset()                    { *m = SetServiceRequest{} }
func (m *SetServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*SetServiceRequest) ProtoMessage()               {}
func (*SetServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SetServiceRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *SetServiceRequest) GetSubdomain() string {
	if m != nil {
		return m.Subdomain
	}
	return ""
}

func (m *SetServiceRequest) GetHandlerGaid() string {
	if m != nil {
		return m.HandlerGaid
	}
	return ""
}

func (m *SetServiceRequest) GetDefaultSchema() DomainServiceSchema {
	if m != nil {
		return m.DefaultSchema
	}
	return DomainServiceSchema_HTTP
}

type ServiceRequest struct {
	Domain    string `protobuf:"bytes,1,opt,name=domain" json:"domain,omitempty"`
	Subdomain string `protobuf:"bytes,2,opt,name=subdomain" json:"subdomain,omitempty"`
}

func (m *ServiceRequest) Reset()                    { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()               {}
func (*ServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ServiceRequest) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *ServiceRequest) GetSubdomain() string {
	if m != nil {
		return m.Subdomain
	}
	return ""
}

type DomainServicesResponse struct {
	Services map[string]*DomainServiceResponse `protobuf:"bytes,1,rep,name=services" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DomainServicesResponse) Reset()                    { *m = DomainServicesResponse{} }
func (m *DomainServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*DomainServicesResponse) ProtoMessage()               {}
func (*DomainServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DomainServicesResponse) GetServices() map[string]*DomainServiceResponse {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterType((*LookupRequest)(nil), "domains.LookupRequest")
	proto.RegisterType((*GetDomainsRequest)(nil), "domains.GetDomainsRequest")
	proto.RegisterType((*CreateRequest)(nil), "domains.CreateRequest")
	proto.RegisterType((*DomainResponse)(nil), "domains.DomainResponse")
	proto.RegisterType((*DomainsResponse)(nil), "domains.DomainsResponse")
	proto.RegisterType((*VerifyRequest)(nil), "domains.VerifyRequest")
	proto.RegisterType((*DomainServiceResponse)(nil), "domains.DomainServiceResponse")
	proto.RegisterType((*SetServiceRequest)(nil), "domains.SetServiceRequest")
	proto.RegisterType((*ServiceRequest)(nil), "domains.ServiceRequest")
	proto.RegisterType((*DomainServicesResponse)(nil), "domains.DomainServicesResponse")
	proto.RegisterEnum("domains.VerificationMode", VerificationMode_name, VerificationMode_value)
	proto.RegisterEnum("domains.DomainServiceSchema", DomainServiceSchema_name, DomainServiceSchema_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Domains service

type DomainsClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	GetDomains(ctx context.Context, in *GetDomainsRequest, opts ...grpc.CallOption) (*DomainsResponse, error)
	Retrieve(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*DomainResponse, error)
	SetService(ctx context.Context, in *SetServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	RetrieveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	GetServices(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServicesResponse, error)
	RemoveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	DisableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
	EnableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error)
}

type domainsClient struct {
	cc *grpc.ClientConn
}

func NewDomainsClient(cc *grpc.ClientConn) DomainsClient {
	return &domainsClient{cc}
}

func (c *domainsClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) GetDomains(ctx context.Context, in *GetDomainsRequest, opts ...grpc.CallOption) (*DomainsResponse, error) {
	out := new(DomainsResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/GetDomains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) Retrieve(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*DomainResponse, error) {
	out := new(DomainResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/Verify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) SetService(ctx context.Context, in *SetServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/SetService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) RetrieveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/RetrieveService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) GetServices(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServicesResponse, error) {
	out := new(DomainServicesResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/GetServices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) RemoveService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/RemoveService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) DisableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/DisableService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainsClient) EnableService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DomainServiceResponse, error) {
	out := new(DomainServiceResponse)
	err := grpc.Invoke(ctx, "/domains.Domains/EnableService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Domains service

type DomainsServer interface {
	Create(context.Context, *CreateRequest) (*DomainResponse, error)
	GetDomains(context.Context, *GetDomainsRequest) (*DomainsResponse, error)
	Retrieve(context.Context, *LookupRequest) (*DomainResponse, error)
	Verify(context.Context, *VerifyRequest) (*DomainResponse, error)
	SetService(context.Context, *SetServiceRequest) (*DomainServiceResponse, error)
	RetrieveService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
	GetServices(context.Context, *ServiceRequest) (*DomainServicesResponse, error)
	RemoveService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
	DisableService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
	EnableService(context.Context, *ServiceRequest) (*DomainServiceResponse, error)
}

func RegisterDomainsServer(s *grpc.Server, srv DomainsServer) {
	s.RegisterService(&_Domains_serviceDesc, srv)
}

func _Domains_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_GetDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).GetDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/GetDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).GetDomains(ctx, req.(*GetDomainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_Retrieve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Retrieve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/Retrieve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Retrieve(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_SetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).SetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/SetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).SetService(ctx, req.(*SetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_RetrieveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).RetrieveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/RetrieveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).RetrieveService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).GetServices(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).RemoveService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_DisableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).DisableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/DisableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).DisableService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domains_EnableService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomainsServer).EnableService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domains.Domains/EnableService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomainsServer).EnableService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Domains_serviceDesc = grpc.ServiceDesc{
	ServiceName: "domains.Domains",
	HandlerType: (*DomainsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Domains_Create_Handler,
		},
		{
			MethodName: "GetDomains",
			Handler:    _Domains_GetDomains_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Domains_Retrieve_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Domains_Verify_Handler,
		},
		{
			MethodName: "SetService",
			Handler:    _Domains_SetService_Handler,
		},
		{
			MethodName: "RetrieveService",
			Handler:    _Domains_RetrieveService_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _Domains_GetServices_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _Domains_RemoveService_Handler,
		},
		{
			MethodName: "DisableService",
			Handler:    _Domains_DisableService_Handler,
		},
		{
			MethodName: "EnableService",
			Handler:    _Domains_EnableService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domains.proto",
}

func init() { proto.RegisterFile("domains.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x4e, 0x1a, 0x41,
	0x14, 0x76, 0xf9, 0x13, 0x0e, 0x3f, 0xae, 0x63, 0xaa, 0x84, 0xd8, 0x8a, 0x34, 0x4d, 0x89, 0x8d,
	0x90, 0xd2, 0x5e, 0xd4, 0xf6, 0xc2, 0xf8, 0x83, 0x60, 0xa3, 0xa6, 0x59, 0xac, 0x17, 0xed, 0x05,
	0x19, 0xd8, 0x23, 0x4e, 0x04, 0x86, 0x32, 0xbb, 0xa4, 0x3e, 0x4b, 0x1f, 0xa0, 0xd7, 0x7d, 0x81,
	0xa6, 0xef, 0xd1, 0x97, 0x69, 0xd8, 0x99, 0x05, 0x96, 0x9f, 0x6e, 0x8c, 0xde, 0x31, 0x67, 0xce,
	0xf9, 0xe6, 0xdb, 0xef, 0x9c, 0xf3, 0x05, 0x48, 0x9a, 0xbc, 0x43, 0x59, 0x57, 0x14, 0x7a, 0x7d,
	0x6e, 0x71, 0xb2, 0xac, 0x8e, 0x99, 0xad, 0x16, 0xe7, 0xad, 0x36, 0x16, 0x9d, 0x70, 0xc3, 0xbe,
	0x2e, 0x5a, 0xac, 0x83, 0xc2, 0xa2, 0x9d, 0x9e, 0xcc, 0xcc, 0xbd, 0x84, 0xe4, 0x19, 0xe7, 0xb7,
	0x76, 0xcf, 0xc0, 0x6f, 0x36, 0x0a, 0x8b, 0xac, 0x43, 0x44, 0x16, 0xa7, 0xb5, 0xac, 0x96, 0x8f,
	0x19, 0xea, 0x94, 0x5b, 0x83, 0xd5, 0x0a, 0x5a, 0xc7, 0x12, 0x57, 0x25, 0x0f, 0xab, 0x8f, 0xfa,
	0x48, 0x2d, 0xf4, 0xab, 0xfe, 0xab, 0x41, 0x4a, 0xd6, 0x1a, 0x28, 0x7a, 0xbc, 0x2b, 0x70, 0x51,
	0x2a, 0xc9, 0x41, 0x62, 0x80, 0x7d, 0x76, 0xcd, 0x9a, 0xd4, 0x62, 0xbc, 0x9b, 0x0e, 0x38, 0xb7,
	0x9e, 0x18, 0x79, 0x05, 0xab, 0x93, 0xe7, 0x7a, 0x87, 0x9b, 0x98, 0x0e, 0x3a, 0x89, 0xfa, 0xe4,
	0xc5, 0x39, 0x37, 0x91, 0x6c, 0x41, 0x9c, 0x89, 0xba, 0x0c, 0xa3, 0x99, 0x0e, 0x39, 0x69, 0xc0,
	0xc4, 0x95, 0x8a, 0x90, 0x7d, 0x48, 0x9a, 0xd4, 0xc2, 0x71, 0x4a, 0x38, 0xab, 0xe5, 0xe3, 0xa5,
	0x4c, 0x41, 0x8a, 0x57, 0x70, 0xc5, 0x2b, 0x5c, 0xba, 0xe2, 0x19, 0x89, 0x61, 0x81, 0x0b, 0x90,
	0xfb, 0xa9, 0xc1, 0xca, 0x48, 0x19, 0xf5, 0x79, 0xfb, 0xe0, 0x36, 0x21, 0xad, 0x65, 0x83, 0xf9,
	0x78, 0xe9, 0x45, 0xc1, 0xed, 0xd1, 0x54, 0xaa, 0x7b, 0x2e, 0x77, 0xad, 0xfe, 0x9d, 0x31, 0x6a,
	0x5d, 0x0d, 0x12, 0x93, 0x17, 0x44, 0x87, 0xe0, 0x2d, 0xde, 0x29, 0xb1, 0x86, 0x3f, 0xc9, 0x2e,
	0x84, 0x07, 0xb4, 0x6d, 0xa3, 0x23, 0x51, 0xbc, 0xb4, 0x31, 0xf5, 0x80, 0x8b, 0x6f, 0xc8, 0xac,
	0xf7, 0x81, 0x77, 0xda, 0xb0, 0x61, 0x0e, 0xeb, 0x3b, 0xbf, 0x86, 0xfd, 0x08, 0xc0, 0x13, 0x09,
	0x53, 0xc3, 0xfe, 0x80, 0x35, 0xd1, 0xb7, 0x6f, 0x9b, 0x10, 0x13, 0x76, 0x43, 0x5d, 0xc9, 0xa6,
	0x8d, 0x03, 0xe4, 0x08, 0x52, 0x26, 0x5e, 0x53, 0xbb, 0x6d, 0xd5, 0x45, 0xf3, 0x06, 0x3b, 0xd4,
	0x69, 0x57, 0xaa, 0xb4, 0x39, 0x45, 0x5a, 0xbd, 0x56, 0x73, 0x72, 0x8c, 0xa4, 0xaa, 0x91, 0x47,
	0x52, 0x86, 0x15, 0x3a, 0xa0, 0xac, 0xdd, 0x68, 0xa3, 0x8b, 0x12, 0xca, 0x06, 0x7d, 0x51, 0x52,
	0x6e, 0x91, 0x82, 0xd9, 0x86, 0xc4, 0x0d, 0xed, 0x9a, 0x6d, 0xec, 0xd7, 0x5b, 0x94, 0xc9, 0x76,
	0xc7, 0x8c, 0xb8, 0x8a, 0x55, 0x28, 0x33, 0xc9, 0x53, 0x00, 0x26, 0xea, 0xd8, 0xa5, 0x8d, 0x36,
	0x9a, 0xe9, 0x48, 0x56, 0xcb, 0x47, 0x8d, 0x18, 0x13, 0x65, 0x19, 0xc8, 0xfd, 0xd2, 0x60, 0xb5,
	0x86, 0xd6, 0x48, 0x9a, 0xff, 0x6a, 0xe9, 0xa3, 0xcc, 0x34, 0x9b, 0xe0, 0x2c, 0x9b, 0x59, 0xf1,
	0x42, 0xf7, 0x16, 0x2f, 0x77, 0x02, 0xa9, 0xc7, 0xe0, 0x9b, 0xfb, 0xa3, 0xc1, 0xba, 0xe7, 0xb9,
	0xf1, 0xcc, 0x9f, 0x42, 0x54, 0xa8, 0x98, 0x1a, 0xfa, 0xdd, 0xf9, 0x0c, 0xc7, 0xb3, 0xef, 0x06,
	0xe4, 0xf0, 0x8f, 0xca, 0x33, 0x5f, 0x21, 0xe9, 0xb9, 0x9a, 0x33, 0xfe, 0x6f, 0xbd, 0xe3, 0xff,
	0x6c, 0xfe, 0x53, 0x73, 0xb6, 0x60, 0xe7, 0x35, 0xe8, 0x57, 0xd3, 0x2e, 0xb1, 0x0c, 0xc1, 0xe3,
	0x8b, 0x9a, 0xbe, 0x44, 0xa2, 0x10, 0x3a, 0x39, 0x3d, 0x2b, 0xeb, 0x1a, 0x01, 0x88, 0x9c, 0x1f,
	0x5c, 0x7c, 0x3e, 0x38, 0xd3, 0x03, 0x3b, 0x3b, 0xb0, 0x36, 0x47, 0xe3, 0x61, 0x72, 0xf5, 0xf2,
	0xf2, 0x93, 0xbe, 0x44, 0x62, 0x10, 0x1e, 0xfe, 0xaa, 0xe9, 0x5a, 0xe9, 0x77, 0x18, 0x96, 0xd5,
	0xea, 0x92, 0x3d, 0x88, 0x48, 0x87, 0x24, 0xeb, 0x23, 0x7e, 0x1e, 0xcb, 0xcc, 0x2c, 0x5a, 0x5b,
	0x72, 0x08, 0x30, 0x76, 0x5c, 0x92, 0x19, 0xa5, 0xcd, 0xd8, 0x70, 0x26, 0xbd, 0xc8, 0x5a, 0xc8,
	0x07, 0x88, 0x1a, 0x68, 0xf5, 0x19, 0x0e, 0x26, 0x09, 0x78, 0x1c, 0x7f, 0x31, 0x81, 0x3d, 0x88,
	0x48, 0xb3, 0x98, 0x28, 0xf5, 0xb8, 0xc7, 0xe2, 0xd2, 0x2a, 0xc0, 0x78, 0x3f, 0x26, 0xb8, 0xcf,
	0x2c, 0x4d, 0xc6, 0xa7, 0x6d, 0xe4, 0x23, 0xac, 0xb8, 0x5f, 0xe0, 0xc2, 0x6d, 0x4c, 0xc0, 0xdd,
	0x0b, 0xab, 0x02, 0xf1, 0xca, 0x88, 0x80, 0x58, 0x8c, 0xb3, 0xe5, 0x33, 0xb5, 0xa4, 0x0a, 0x49,
	0x03, 0x3b, 0xfc, 0x11, 0x28, 0x9d, 0x42, 0xea, 0x98, 0x89, 0xa1, 0xab, 0x3c, 0x18, 0xaa, 0x0a,
	0x49, 0xe9, 0x4f, 0x0f, 0x45, 0x3a, 0x7c, 0xfe, 0x65, 0xbb, 0xc5, 0xac, 0x1b, 0xbb, 0x51, 0x68,
	0xf2, 0x4e, 0xb1, 0x69, 0x37, 0xf0, 0xbb, 0xfc, 0x07, 0xb1, 0xdb, 0xe2, 0x45, 0x55, 0xda, 0x88,
	0x38, 0x91, 0x37, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xe6, 0xed, 0x8f, 0x7b, 0x08, 0x00,
	0x00,
}
