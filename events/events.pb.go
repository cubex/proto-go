// Code generated by protoc-gen-go.
// source: events.proto
// DO NOT EDIT!

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	EventRequest
	EventSubmittedResponse
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/duration"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventRequest struct {
	Timestamp         *google_protobuf.Timestamp            `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	DeviceId          string                                `protobuf:"bytes,2,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	AdvcancedDeviceId string                                `protobuf:"bytes,3,opt,name=advcanced_device_id,json=advcancedDeviceId" json:"advcanced_device_id,omitempty"`
	UserId            string                                `protobuf:"bytes,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Source            string                                `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
	Ip                string                                `protobuf:"bytes,6,opt,name=ip" json:"ip,omitempty"`
	EventTypeId       string                                `protobuf:"bytes,7,opt,name=event_type_id,json=eventTypeId" json:"event_type_id,omitempty"`
	Strings           map[string]string                     `protobuf:"bytes,8,rep,name=strings" json:"strings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamps        map[string]*google_protobuf.Timestamp `protobuf:"bytes,9,rep,name=timestamps" json:"timestamps,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Durations         map[string]*google_protobuf1.Duration `protobuf:"bytes,10,rep,name=durations" json:"durations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Bools             map[string]bool                       `protobuf:"bytes,11,rep,name=bools" json:"bools,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Floats            map[string]float32                    `protobuf:"bytes,12,rep,name=floats" json:"floats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Integers          map[string]int64                      `protobuf:"bytes,13,rep,name=integers" json:"integers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Meta              map[string]string                     `protobuf:"bytes,14,rep,name=meta" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventRequest) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *EventRequest) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *EventRequest) GetAdvcancedDeviceId() string {
	if m != nil {
		return m.AdvcancedDeviceId
	}
	return ""
}

func (m *EventRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *EventRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *EventRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *EventRequest) GetEventTypeId() string {
	if m != nil {
		return m.EventTypeId
	}
	return ""
}

func (m *EventRequest) GetStrings() map[string]string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *EventRequest) GetTimestamps() map[string]*google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamps
	}
	return nil
}

func (m *EventRequest) GetDurations() map[string]*google_protobuf1.Duration {
	if m != nil {
		return m.Durations
	}
	return nil
}

func (m *EventRequest) GetBools() map[string]bool {
	if m != nil {
		return m.Bools
	}
	return nil
}

func (m *EventRequest) GetFloats() map[string]float32 {
	if m != nil {
		return m.Floats
	}
	return nil
}

func (m *EventRequest) GetIntegers() map[string]int64 {
	if m != nil {
		return m.Integers
	}
	return nil
}

func (m *EventRequest) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

type EventSubmittedResponse struct {
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId" json:"event_id,omitempty"`
}

func (m *EventSubmittedResponse) Reset()                    { *m = EventSubmittedResponse{} }
func (m *EventSubmittedResponse) String() string            { return proto.CompactTextString(m) }
func (*EventSubmittedResponse) ProtoMessage()               {}
func (*EventSubmittedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventSubmittedResponse) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func init() {
	proto.RegisterType((*EventRequest)(nil), "events.EventRequest")
	proto.RegisterType((*EventSubmittedResponse)(nil), "events.EventSubmittedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Events service

type EventsClient interface {
	FireEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubmittedResponse, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) FireEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubmittedResponse, error) {
	out := new(EventSubmittedResponse)
	err := grpc.Invoke(ctx, "/events.Events/FireEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Events service

type EventsServer interface {
	FireEvent(context.Context, *EventRequest) (*EventSubmittedResponse, error)
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_FireEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).FireEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/events.Events/FireEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).FireEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "events.Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FireEvent",
			Handler:    _Events_FireEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x95, 0xa4, 0x71, 0xe2, 0xc9, 0x07, 0xb0, 0x54, 0xc5, 0x35, 0x52, 0x1b, 0x02, 0x87,
	0x5c, 0x70, 0x50, 0x2a, 0x44, 0x68, 0x25, 0x24, 0xaa, 0xb4, 0x52, 0x84, 0xb8, 0xb8, 0x95, 0x10,
	0x5c, 0x22, 0x7f, 0x6c, 0xcd, 0x8a, 0xc4, 0x6b, 0xbc, 0xeb, 0x88, 0xdc, 0xf8, 0xd3, 0x91, 0x67,
	0x6d, 0xc7, 0x69, 0x2d, 0xa2, 0xde, 0x32, 0xb3, 0xef, 0xf7, 0x56, 0x9e, 0x37, 0x1b, 0xe8, 0xd2,
	0x35, 0x0d, 0xa5, 0xb0, 0xa2, 0x98, 0x4b, 0x4e, 0x34, 0x55, 0x99, 0xa7, 0x01, 0xe7, 0xc1, 0x92,
	0x8e, 0xb1, 0xeb, 0x26, 0x77, 0x63, 0xc9, 0x56, 0x54, 0x48, 0x67, 0x15, 0x29, 0xa1, 0x79, 0x72,
	0x5f, 0xe0, 0x27, 0xb1, 0x23, 0x19, 0x0f, 0xd5, 0xf9, 0xf0, 0xaf, 0x0e, 0xdd, 0xab, 0xd4, 0xcb,
	0xa6, 0xbf, 0x13, 0x2a, 0x24, 0x99, 0x82, 0x5e, 0x78, 0x18, 0xb5, 0x41, 0x6d, 0xd4, 0x99, 0x98,
	0x96, 0x32, 0xb1, 0x72, 0x13, 0xeb, 0x36, 0x57, 0xd8, 0x5b, 0x31, 0x79, 0x09, 0xba, 0x4f, 0xd7,
	0xcc, 0xa3, 0x0b, 0xe6, 0x1b, 0xf5, 0x41, 0x6d, 0xa4, 0xdb, 0x6d, 0xd5, 0x98, 0xfb, 0xc4, 0x82,
	0xe7, 0x8e, 0xbf, 0xf6, 0x9c, 0xd0, 0xa3, 0xfe, 0x62, 0x2b, 0x6b, 0xa0, 0xec, 0x59, 0x71, 0x34,
	0xcb, 0xf5, 0x2f, 0xa0, 0x95, 0x08, 0x1a, 0xa7, 0x9a, 0x03, 0xd4, 0x68, 0x69, 0x39, 0xf7, 0xc9,
	0x11, 0x68, 0x82, 0x27, 0xb1, 0x47, 0x8d, 0xa6, 0xea, 0xab, 0x8a, 0xf4, 0xa1, 0xce, 0x22, 0x43,
	0xc3, 0x5e, 0x9d, 0x45, 0x64, 0x08, 0x3d, 0x9c, 0xd1, 0x42, 0x6e, 0x22, 0xbc, 0xaa, 0x85, 0x47,
	0x1d, 0x6c, 0xde, 0x6e, 0xa2, 0xf4, 0x92, 0x0b, 0x68, 0x09, 0x19, 0xb3, 0x30, 0x10, 0x46, 0x7b,
	0xd0, 0x18, 0x75, 0x26, 0xaf, 0xac, 0x6c, 0xca, 0xe5, 0x91, 0x58, 0x37, 0x4a, 0x73, 0x15, 0xca,
	0x78, 0x63, 0xe7, 0x04, 0x99, 0x01, 0x14, 0xdf, 0x2e, 0x0c, 0x1d, 0xf9, 0x37, 0x95, 0x7c, 0x31,
	0xad, 0xcc, 0xa2, 0xc4, 0x91, 0xcf, 0xa0, 0xe7, 0x89, 0x08, 0x03, 0xd0, 0xe4, 0x75, 0xa5, 0xc9,
	0x2c, 0x57, 0x29, 0x8f, 0x2d, 0x45, 0xde, 0x43, 0xd3, 0xe5, 0x7c, 0x29, 0x8c, 0x0e, 0xe2, 0xa7,
	0x95, 0xf8, 0x65, 0xaa, 0x50, 0xa8, 0x52, 0x93, 0x29, 0x68, 0x77, 0x4b, 0xee, 0x48, 0x61, 0x74,
	0x91, 0x1b, 0x54, 0x72, 0xd7, 0x28, 0x51, 0x60, 0xa6, 0x27, 0x9f, 0xa0, 0xcd, 0x42, 0x49, 0x03,
	0x1a, 0x0b, 0xa3, 0x87, 0xec, 0xb0, 0x92, 0x9d, 0x67, 0x22, 0x45, 0x17, 0x0c, 0x99, 0xc0, 0xc1,
	0x8a, 0x4a, 0xc7, 0xe8, 0x23, 0x7b, 0x52, 0xc9, 0x7e, 0xa5, 0xd2, 0x51, 0x1c, 0x6a, 0xcd, 0x73,
	0xe8, 0x96, 0x63, 0x20, 0x4f, 0xa1, 0xf1, 0x8b, 0x6e, 0x70, 0x41, 0x75, 0x3b, 0xfd, 0x49, 0x0e,
	0xa1, 0xb9, 0x76, 0x96, 0x09, 0xcd, 0x56, 0x4f, 0x15, 0xe7, 0xf5, 0x69, 0xcd, 0xfc, 0x0e, 0x4f,
	0xee, 0x45, 0x50, 0x81, 0xbf, 0x2b, 0xe3, 0xff, 0xdf, 0xf9, 0x92, 0xf5, 0x37, 0xe8, 0xef, 0x06,
	0x53, 0xe1, 0x3c, 0xde, 0x75, 0x3e, 0x7e, 0xe0, 0x9c, 0x3b, 0x94, 0x8d, 0xa7, 0x00, 0xdb, 0xc8,
	0xf6, 0x7d, 0x6d, 0xbb, 0x4c, 0x7e, 0x84, 0x4e, 0x29, 0xb4, 0x7d, 0x68, 0xbd, 0x8c, 0x5e, 0x40,
	0x6f, 0x27, 0xb3, 0x7d, 0x70, 0xa3, 0x0c, 0x7f, 0x00, 0xbd, 0x08, 0xed, 0x31, 0xf1, 0x0c, 0xcf,
	0xe0, 0x08, 0xa3, 0xbf, 0x49, 0xdc, 0x15, 0x93, 0x92, 0xfa, 0x36, 0x15, 0x11, 0x0f, 0x05, 0x25,
	0xc7, 0xd0, 0x56, 0x6f, 0x98, 0xf9, 0x99, 0x55, 0x0b, 0xeb, 0xb9, 0x3f, 0xf9, 0x02, 0x1a, 0x42,
	0xf8, 0x82, 0xae, 0x59, 0x4c, 0xb1, 0x22, 0x87, 0x55, 0xcb, 0x64, 0xee, 0xae, 0xd8, 0x83, 0x7b,
	0x2e, 0x87, 0x3f, 0x06, 0x01, 0x93, 0x3f, 0x13, 0xd7, 0xf2, 0xf8, 0x6a, 0xec, 0x25, 0x2e, 0xfd,
	0xa3, 0xfe, 0x30, 0xdf, 0x06, 0x7c, 0xac, 0x50, 0x57, 0xc3, 0xc6, 0xd9, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xca, 0xfb, 0xcb, 0xac, 0x88, 0x05, 0x00, 0x00,
}
