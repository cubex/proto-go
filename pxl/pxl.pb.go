// Code generated by protoc-gen-go.
// source: pxl.proto
// DO NOT EDIT!

/*
Package pxl is a generated protocol buffer package.

It is generated from these files:
	pxl.proto

It has these top-level messages:
	Device
	IPInformation
	OperatingSystem
	DeviceClient
	Location
*/
package pxl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Platform int32

const (
	Platform_UNKNOWN_PLATFORM Platform = 0
	Platform_DESKTOP          Platform = 1
	Platform_MOBILE           Platform = 2
	Platform_TABLET           Platform = 3
	Platform_TV               Platform = 4
	Platform_CONSOLE          Platform = 5
	Platform_CAMERA           Platform = 6
	Platform_BOT              Platform = 7
	Platform_SERVER           Platform = 8
	Platform_WATCH            Platform = 9
	Platform_IOT              Platform = 10
)

var Platform_name = map[int32]string{
	0:  "UNKNOWN_PLATFORM",
	1:  "DESKTOP",
	2:  "MOBILE",
	3:  "TABLET",
	4:  "TV",
	5:  "CONSOLE",
	6:  "CAMERA",
	7:  "BOT",
	8:  "SERVER",
	9:  "WATCH",
	10: "IOT",
}
var Platform_value = map[string]int32{
	"UNKNOWN_PLATFORM": 0,
	"DESKTOP":          1,
	"MOBILE":           2,
	"TABLET":           3,
	"TV":               4,
	"CONSOLE":          5,
	"CAMERA":           6,
	"BOT":              7,
	"SERVER":           8,
	"WATCH":            9,
	"IOT":              10,
}

func (x Platform) String() string {
	return proto.EnumName(Platform_name, int32(x))
}
func (Platform) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OperatingSystem_Type int32

const (
	OperatingSystem_OTHER_OS   OperatingSystem_Type = 0
	OperatingSystem_WINDOWS    OperatingSystem_Type = 1
	OperatingSystem_MAC        OperatingSystem_Type = 2
	OperatingSystem_LINUX      OperatingSystem_Type = 3
	OperatingSystem_ANDROID    OperatingSystem_Type = 4
	OperatingSystem_IOS        OperatingSystem_Type = 5
	OperatingSystem_CHROME_OS  OperatingSystem_Type = 6
	OperatingSystem_BLACKBERRY OperatingSystem_Type = 7
)

var OperatingSystem_Type_name = map[int32]string{
	0: "OTHER_OS",
	1: "WINDOWS",
	2: "MAC",
	3: "LINUX",
	4: "ANDROID",
	5: "IOS",
	6: "CHROME_OS",
	7: "BLACKBERRY",
}
var OperatingSystem_Type_value = map[string]int32{
	"OTHER_OS":   0,
	"WINDOWS":    1,
	"MAC":        2,
	"LINUX":      3,
	"ANDROID":    4,
	"IOS":        5,
	"CHROME_OS":  6,
	"BLACKBERRY": 7,
}

func (x OperatingSystem_Type) String() string {
	return proto.EnumName(OperatingSystem_Type_name, int32(x))
}
func (OperatingSystem_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type DeviceClient_Type int32

const (
	DeviceClient_UNKNOWN_CLIENT DeviceClient_Type = 0
	DeviceClient_BROWSER        DeviceClient_Type = 1
	DeviceClient_APPLICATION    DeviceClient_Type = 2
	DeviceClient_EMAIL          DeviceClient_Type = 3
	DeviceClient_FEED_READER    DeviceClient_Type = 4
	DeviceClient_BOT            DeviceClient_Type = 5
	DeviceClient_CRAWLER        DeviceClient_Type = 6
	DeviceClient_LINK_CHECKER   DeviceClient_Type = 7
	DeviceClient_VALIDATOR      DeviceClient_Type = 8
	DeviceClient_CONSOLE        DeviceClient_Type = 9
	DeviceClient_STATUS         DeviceClient_Type = 10
	DeviceClient_IOT            DeviceClient_Type = 11
)

var DeviceClient_Type_name = map[int32]string{
	0:  "UNKNOWN_CLIENT",
	1:  "BROWSER",
	2:  "APPLICATION",
	3:  "EMAIL",
	4:  "FEED_READER",
	5:  "BOT",
	6:  "CRAWLER",
	7:  "LINK_CHECKER",
	8:  "VALIDATOR",
	9:  "CONSOLE",
	10: "STATUS",
	11: "IOT",
}
var DeviceClient_Type_value = map[string]int32{
	"UNKNOWN_CLIENT": 0,
	"BROWSER":        1,
	"APPLICATION":    2,
	"EMAIL":          3,
	"FEED_READER":    4,
	"BOT":            5,
	"CRAWLER":        6,
	"LINK_CHECKER":   7,
	"VALIDATOR":      8,
	"CONSOLE":        9,
	"STATUS":         10,
	"IOT":            11,
}

func (x DeviceClient_Type) String() string {
	return proto.EnumName(DeviceClient_Type_name, int32(x))
}
func (DeviceClient_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Device struct {
	DeviceId     string         `protobuf:"bytes,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Ip           *IPInformation `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Platform     Platform       `protobuf:"varint,3,opt,name=platform,enum=pxl.Platform" json:"platform,omitempty"`
	Client       *DeviceClient  `protobuf:"bytes,4,opt,name=client" json:"client,omitempty"`
	CpuBrand     string         `protobuf:"bytes,5,opt,name=cpu_brand,json=cpuBrand" json:"cpu_brand,omitempty"`
	CpuArc       string         `protobuf:"bytes,6,opt,name=cpu_arc,json=cpuArc" json:"cpu_arc,omitempty"`
	Brand        string         `protobuf:"bytes,7,opt,name=brand" json:"brand,omitempty"`
	Model        string         `protobuf:"bytes,8,opt,name=model" json:"model,omitempty"`
	ModelVersion string         `protobuf:"bytes,9,opt,name=model_version,json=modelVersion" json:"model_version,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Device) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *Device) GetIp() *IPInformation {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *Device) GetPlatform() Platform {
	if m != nil {
		return m.Platform
	}
	return Platform_UNKNOWN_PLATFORM
}

func (m *Device) GetClient() *DeviceClient {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *Device) GetCpuBrand() string {
	if m != nil {
		return m.CpuBrand
	}
	return ""
}

func (m *Device) GetCpuArc() string {
	if m != nil {
		return m.CpuArc
	}
	return ""
}

func (m *Device) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Device) GetModelVersion() string {
	if m != nil {
		return m.ModelVersion
	}
	return ""
}

type IPInformation struct {
	Ip           string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Isp          string `protobuf:"bytes,2,opt,name=isp" json:"isp,omitempty"`
	Organisation string `protobuf:"bytes,3,opt,name=organisation" json:"organisation,omitempty"`
	AsNumber     string `protobuf:"bytes,4,opt,name=as_number,json=asNumber" json:"as_number,omitempty"`
	NetSpeed     string `protobuf:"bytes,5,opt,name=net_speed,json=netSpeed" json:"net_speed,omitempty"`
	UserType     string `protobuf:"bytes,6,opt,name=user_type,json=userType" json:"user_type,omitempty"`
}

func (m *IPInformation) Reset()                    { *m = IPInformation{} }
func (m *IPInformation) String() string            { return proto.CompactTextString(m) }
func (*IPInformation) ProtoMessage()               {}
func (*IPInformation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IPInformation) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IPInformation) GetIsp() string {
	if m != nil {
		return m.Isp
	}
	return ""
}

func (m *IPInformation) GetOrganisation() string {
	if m != nil {
		return m.Organisation
	}
	return ""
}

func (m *IPInformation) GetAsNumber() string {
	if m != nil {
		return m.AsNumber
	}
	return ""
}

func (m *IPInformation) GetNetSpeed() string {
	if m != nil {
		return m.NetSpeed
	}
	return ""
}

func (m *IPInformation) GetUserType() string {
	if m != nil {
		return m.UserType
	}
	return ""
}

type OperatingSystem struct {
	Brand        string               `protobuf:"bytes,1,opt,name=brand" json:"brand,omitempty"`
	Type         OperatingSystem_Type `protobuf:"varint,2,opt,name=type,enum=pxl.OperatingSystem_Type" json:"type,omitempty"`
	TypeSpecific string               `protobuf:"bytes,3,opt,name=type_specific,json=typeSpecific" json:"type_specific,omitempty"`
	Version      string               `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
}

func (m *OperatingSystem) Reset()                    { *m = OperatingSystem{} }
func (m *OperatingSystem) String() string            { return proto.CompactTextString(m) }
func (*OperatingSystem) ProtoMessage()               {}
func (*OperatingSystem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OperatingSystem) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *OperatingSystem) GetType() OperatingSystem_Type {
	if m != nil {
		return m.Type
	}
	return OperatingSystem_OTHER_OS
}

func (m *OperatingSystem) GetTypeSpecific() string {
	if m != nil {
		return m.TypeSpecific
	}
	return ""
}

func (m *OperatingSystem) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type DeviceClient struct {
	Brand   string            `protobuf:"bytes,1,opt,name=brand" json:"brand,omitempty"`
	Product string            `protobuf:"bytes,2,opt,name=product" json:"product,omitempty"`
	Version string            `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
	Type    DeviceClient_Type `protobuf:"varint,4,opt,name=type,enum=pxl.DeviceClient_Type" json:"type,omitempty"`
}

func (m *DeviceClient) Reset()                    { *m = DeviceClient{} }
func (m *DeviceClient) String() string            { return proto.CompactTextString(m) }
func (*DeviceClient) ProtoMessage()               {}
func (*DeviceClient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeviceClient) GetBrand() string {
	if m != nil {
		return m.Brand
	}
	return ""
}

func (m *DeviceClient) GetProduct() string {
	if m != nil {
		return m.Product
	}
	return ""
}

func (m *DeviceClient) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DeviceClient) GetType() DeviceClient_Type {
	if m != nil {
		return m.Type
	}
	return DeviceClient_UNKNOWN_CLIENT
}

type Location struct {
	Longitude      float64 `protobuf:"fixed64,1,opt,name=longitude" json:"longitude,omitempty"`
	Latitude       float64 `protobuf:"fixed64,2,opt,name=latitude" json:"latitude,omitempty"`
	Continent      string  `protobuf:"bytes,3,opt,name=continent" json:"continent,omitempty"`
	SovereignState string  `protobuf:"bytes,4,opt,name=sovereign_state,json=sovereignState" json:"sovereign_state,omitempty"`
	Country        string  `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
	Region         string  `protobuf:"bytes,6,opt,name=region" json:"region,omitempty"`
	State          string  `protobuf:"bytes,7,opt,name=state" json:"state,omitempty"`
	Borough        string  `protobuf:"bytes,8,opt,name=borough" json:"borough,omitempty"`
	Town           string  `protobuf:"bytes,9,opt,name=town" json:"town,omitempty"`
	Suburb         string  `protobuf:"bytes,10,opt,name=suburb" json:"suburb,omitempty"`
	Postal         string  `protobuf:"bytes,11,opt,name=postal" json:"postal,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Location) GetContinent() string {
	if m != nil {
		return m.Continent
	}
	return ""
}

func (m *Location) GetSovereignState() string {
	if m != nil {
		return m.SovereignState
	}
	return ""
}

func (m *Location) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *Location) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Location) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Location) GetBorough() string {
	if m != nil {
		return m.Borough
	}
	return ""
}

func (m *Location) GetTown() string {
	if m != nil {
		return m.Town
	}
	return ""
}

func (m *Location) GetSuburb() string {
	if m != nil {
		return m.Suburb
	}
	return ""
}

func (m *Location) GetPostal() string {
	if m != nil {
		return m.Postal
	}
	return ""
}

func init() {
	proto.RegisterType((*Device)(nil), "pxl.Device")
	proto.RegisterType((*IPInformation)(nil), "pxl.IPInformation")
	proto.RegisterType((*OperatingSystem)(nil), "pxl.OperatingSystem")
	proto.RegisterType((*DeviceClient)(nil), "pxl.DeviceClient")
	proto.RegisterType((*Location)(nil), "pxl.Location")
	proto.RegisterEnum("pxl.Platform", Platform_name, Platform_value)
	proto.RegisterEnum("pxl.OperatingSystem_Type", OperatingSystem_Type_name, OperatingSystem_Type_value)
	proto.RegisterEnum("pxl.DeviceClient_Type", DeviceClient_Type_name, DeviceClient_Type_value)
}

func init() { proto.RegisterFile("pxl.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x54, 0xdd, 0x6e, 0xa3, 0x46,
	0x18, 0x2d, 0xd8, 0xc6, 0xf0, 0x25, 0xf1, 0x4e, 0x47, 0xab, 0x2d, 0xfd, 0x53, 0x23, 0xf7, 0xa2,
	0xd9, 0x95, 0x36, 0x91, 0xb6, 0x4f, 0x80, 0xf1, 0xac, 0x82, 0x8c, 0xc1, 0x1a, 0x48, 0xdc, 0xf6,
	0x06, 0x61, 0x3c, 0xeb, 0xa5, 0xb2, 0x01, 0xc1, 0x90, 0x26, 0x97, 0x7d, 0x82, 0xbe, 0x45, 0xaf,
	0xda, 0x8b, 0x4a, 0x7d, 0xc0, 0x6a, 0x66, 0x20, 0x71, 0x5a, 0xf5, 0x8a, 0x39, 0xe7, 0xfb, 0xe6,
	0xd3, 0x9c, 0x73, 0x66, 0x00, 0xab, 0xba, 0xdf, 0x5f, 0x56, 0x75, 0xc9, 0x4b, 0x3c, 0xa8, 0xee,
	0xf7, 0xd3, 0xdf, 0x75, 0x30, 0xe6, 0xec, 0x2e, 0xcf, 0x18, 0xfe, 0x12, 0xac, 0xad, 0x5c, 0x25,
	0xf9, 0xd6, 0xd6, 0xce, 0xb5, 0x0b, 0x8b, 0x9a, 0x8a, 0xf0, 0xb6, 0x78, 0x0a, 0x7a, 0x5e, 0xd9,
	0xfa, 0xb9, 0x76, 0x71, 0xf2, 0x0e, 0x5f, 0x8a, 0x21, 0xde, 0xca, 0x2b, 0x3e, 0x94, 0xf5, 0x21,
	0xe5, 0x79, 0x59, 0x50, 0x3d, 0xaf, 0xf0, 0x6b, 0x30, 0xab, 0x7d, 0xca, 0x05, 0x69, 0x0f, 0xce,
	0xb5, 0x8b, 0xc9, 0xbb, 0x33, 0xd9, 0xb9, 0xea, 0x48, 0xfa, 0x58, 0xc6, 0xaf, 0xc1, 0xc8, 0xf6,
	0x39, 0x2b, 0xb8, 0x3d, 0x94, 0x23, 0x3f, 0x95, 0x8d, 0xea, 0x20, 0xae, 0x2c, 0xd0, 0xae, 0x41,
	0x1c, 0x2b, 0xab, 0xda, 0x64, 0x53, 0xa7, 0xc5, 0xd6, 0x1e, 0xa9, 0x63, 0x65, 0x55, 0x3b, 0x13,
	0x18, 0x7f, 0x06, 0x63, 0x51, 0x4c, 0xeb, 0xcc, 0x36, 0x64, 0xc9, 0xc8, 0xaa, 0xd6, 0xa9, 0x33,
	0xfc, 0x12, 0x46, 0x6a, 0xc7, 0x58, 0xd2, 0x0a, 0x08, 0xf6, 0x50, 0x6e, 0xd9, 0xde, 0x36, 0x15,
	0x2b, 0x01, 0xfe, 0x16, 0xce, 0xe4, 0x22, 0xb9, 0x63, 0x75, 0x93, 0x97, 0x85, 0x6d, 0xc9, 0xea,
	0xa9, 0x24, 0x6f, 0x15, 0x37, 0xfd, 0x43, 0x83, 0xb3, 0x67, 0x92, 0xf1, 0x44, 0x5a, 0xa2, 0x8c,
	0x12, 0xf2, 0x11, 0x0c, 0xf2, 0x46, 0x79, 0x64, 0x51, 0xb1, 0xc4, 0x53, 0x38, 0x2d, 0xeb, 0x5d,
	0x5a, 0xe4, 0x8d, 0xdc, 0x21, 0x4d, 0xb1, 0xe8, 0x33, 0x4e, 0xc8, 0x4b, 0x9b, 0xa4, 0x68, 0x0f,
	0x1b, 0x56, 0x4b, 0x33, 0x2c, 0x6a, 0xa6, 0x4d, 0x20, 0xb1, 0x28, 0x16, 0x8c, 0x27, 0x4d, 0xc5,
	0xd8, 0xa3, 0xf6, 0x82, 0xf1, 0x48, 0x60, 0x51, 0x6c, 0x1b, 0x56, 0x27, 0xfc, 0xa1, 0x62, 0x9d,
	0x7a, 0x53, 0x10, 0xf1, 0x43, 0xc5, 0xa6, 0xbf, 0xea, 0xf0, 0x22, 0xac, 0x58, 0x9d, 0xf2, 0xbc,
	0xd8, 0x45, 0x0f, 0x0d, 0x67, 0x87, 0x27, 0x4f, 0xb4, 0x63, 0x4f, 0xde, 0xc2, 0x50, 0x4e, 0xd0,
	0x65, 0x62, 0x9f, 0xcb, 0x20, 0xfe, 0xb5, 0xf3, 0x52, 0x8c, 0xa4, 0xb2, 0x4d, 0x98, 0x25, 0xbe,
	0xe2, 0x4c, 0x59, 0xfe, 0x21, 0xcf, 0x7a, 0x51, 0x82, 0x8c, 0x3a, 0x0e, 0xdb, 0x30, 0xee, 0xbd,
	0x54, 0x92, 0x7a, 0x38, 0xfd, 0x19, 0x86, 0x62, 0x18, 0x3e, 0x05, 0x33, 0x8c, 0xaf, 0x09, 0x4d,
	0xc2, 0x08, 0x7d, 0x82, 0x4f, 0x60, 0xbc, 0xf6, 0x82, 0x79, 0xb8, 0x8e, 0x90, 0x86, 0xc7, 0x30,
	0x58, 0x3a, 0x2e, 0xd2, 0xb1, 0x05, 0x23, 0xdf, 0x0b, 0x6e, 0x7e, 0x40, 0x03, 0xd1, 0xe0, 0x04,
	0x73, 0x1a, 0x7a, 0x73, 0x34, 0x14, 0x0d, 0x5e, 0x18, 0xa1, 0x11, 0x3e, 0x03, 0xcb, 0xbd, 0xa6,
	0xe1, 0x92, 0x88, 0x29, 0x06, 0x9e, 0x00, 0xcc, 0x7c, 0xc7, 0x5d, 0xcc, 0x08, 0xa5, 0x3f, 0xa2,
	0xf1, 0xf4, 0x6f, 0x1d, 0x4e, 0x8f, 0xaf, 0xd4, 0xff, 0x18, 0x60, 0xc3, 0xb8, 0xaa, 0xcb, 0x6d,
	0x9b, 0xf1, 0x2e, 0xbb, 0x1e, 0x1e, 0xcb, 0x18, 0x3c, 0x93, 0x81, 0xdf, 0x74, 0xa6, 0x0d, 0xa5,
	0x69, 0xaf, 0xfe, 0x73, 0x7b, 0x8f, 0x1c, 0x9b, 0xfe, 0xa9, 0x75, 0x9a, 0x31, 0x4c, 0x6e, 0x82,
	0x45, 0x10, 0xae, 0x83, 0xc4, 0xf5, 0x3d, 0x12, 0xc4, 0x4a, 0xf9, 0x8c, 0x86, 0xeb, 0x88, 0x50,
	0xa4, 0xe1, 0x17, 0x70, 0xe2, 0xac, 0x56, 0xbe, 0xe7, 0x3a, 0xb1, 0x17, 0x06, 0xca, 0x01, 0xb2,
	0x74, 0x3c, 0x1f, 0x0d, 0x44, 0xed, 0x3d, 0x21, 0xf3, 0x84, 0x12, 0x67, 0x4e, 0xa8, 0x72, 0x61,
	0x16, 0xc6, 0x68, 0x24, 0x46, 0xb8, 0xd4, 0x59, 0xfb, 0x84, 0x22, 0x03, 0x23, 0x38, 0xf5, 0xbd,
	0x60, 0x91, 0xb8, 0xd7, 0xc4, 0x5d, 0x10, 0x8a, 0xc6, 0xc2, 0xa4, 0x5b, 0xc7, 0xf7, 0xe6, 0x4e,
	0x1c, 0x52, 0x64, 0xca, 0xee, 0x30, 0x88, 0x42, 0x9f, 0x20, 0x0b, 0x03, 0x18, 0x51, 0xec, 0xc4,
	0x37, 0x11, 0x02, 0xe5, 0x6a, 0x8c, 0x4e, 0xa6, 0x7f, 0xe9, 0x60, 0xfa, 0x65, 0xa6, 0xae, 0xe7,
	0x57, 0x60, 0xed, 0xcb, 0x62, 0x97, 0xf3, 0x76, 0xcb, 0xa4, 0x6d, 0x1a, 0x7d, 0x22, 0xf0, 0x17,
	0x60, 0xee, 0x53, 0xae, 0x8a, 0xba, 0x2c, 0x3e, 0x62, 0xb1, 0x33, 0x2b, 0x0b, 0x9e, 0x17, 0xe2,
	0x95, 0x2b, 0xfb, 0x9e, 0x08, 0xfc, 0x1d, 0xbc, 0x68, 0xca, 0x3b, 0x56, 0xb3, 0x7c, 0x57, 0x24,
	0x0d, 0x4f, 0x39, 0xeb, 0x6e, 0xca, 0xe4, 0x91, 0x8e, 0x04, 0x2b, 0x32, 0xc8, 0xca, 0xb6, 0xe0,
	0xf5, 0x43, 0xf7, 0x00, 0x7a, 0x88, 0x5f, 0x81, 0x51, 0xb3, 0x9d, 0x08, 0xa7, 0x7b, 0xfa, 0x0a,
	0x89, 0x94, 0xd5, 0xc0, 0xee, 0xe9, 0x37, 0xfd, 0x9c, 0x4d, 0x59, 0x97, 0xed, 0xee, 0x63, 0xf7,
	0xf8, 0x7b, 0x88, 0x31, 0x0c, 0x79, 0xf9, 0x4b, 0xff, 0xea, 0xe5, 0x5a, 0xcc, 0x6e, 0xda, 0x4d,
	0x5b, 0x6f, 0x6c, 0x50, 0xb3, 0x15, 0x12, 0x7c, 0x55, 0x36, 0x3c, 0xdd, 0xdb, 0x27, 0x8a, 0x57,
	0xe8, 0xcd, 0x6f, 0x1a, 0x98, 0xfd, 0x6f, 0x0e, 0xbf, 0x04, 0xd4, 0xe7, 0xbc, 0xf2, 0x9d, 0xf8,
	0x7d, 0x48, 0x97, 0x2a, 0xe9, 0x39, 0x89, 0x16, 0x71, 0xb8, 0x42, 0x9a, 0x30, 0x7e, 0x19, 0xce,
	0x3c, 0x9f, 0x20, 0x5d, 0xac, 0x63, 0x67, 0xe6, 0x93, 0x18, 0x0d, 0xb0, 0x01, 0x7a, 0x7c, 0x8b,
	0x86, 0xc7, 0x29, 0x8d, 0x44, 0x83, 0xeb, 0x2c, 0x09, 0x75, 0x90, 0xd1, 0xa7, 0x3e, 0x96, 0xd1,
	0x11, 0x7a, 0x4b, 0x44, 0xa6, 0x16, 0x8c, 0xd6, 0x4e, 0xec, 0x5e, 0x23, 0xab, 0x4f, 0x11, 0x66,
	0xdf, 0xfc, 0xf4, 0xf5, 0x2e, 0xe7, 0x1f, 0xdb, 0xcd, 0x65, 0x56, 0x1e, 0xae, 0xb2, 0x76, 0xc3,
	0xee, 0xaf, 0xe4, 0x7f, 0xff, 0xed, 0xae, 0xbc, 0xaa, 0xee, 0xf7, 0x1b, 0x43, 0xa2, 0xef, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xb8, 0x7b, 0x39, 0x12, 0x06, 0x00, 0x00,
}
