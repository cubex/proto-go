// Code generated by protoc-gen-go.
// source: undercroft.proto
// DO NOT EDIT!

/*
Package undercroft is a generated protocol buffer package.

Storage of applications

It is generated from these files:
	undercroft.proto

It has these top-level messages:
	VendorRequest
	VendorRegisterRequest
	VendorRegisterResponse
	VendorResponse
	VendorUpdateRequest
	VendorListRequest
	VendorUpdateResponse
	VendorsResponse
	AppRequest
	AppsRetrieveRequest
	AppSummaryResponse
	AppResponse
	AppSummariesResponse
	AppsResponse
	AppListRequest
	AppRegisterRequest
	AppRegisterResponse
	AppUpdateRequest
	AppUpdateResponse
	GroupRequest
	GroupResponse
	GroupsResponse
	GroupListRequest
	GroupRegisterRequest
	GroupUpdateRequest
*/
package undercroft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VendorRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *VendorRequest) Reset()                    { *m = VendorRequest{} }
func (m *VendorRequest) String() string            { return proto.CompactTextString(m) }
func (*VendorRequest) ProtoMessage()               {}
func (*VendorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VendorRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type VendorRegisterRequest struct {
	ProjectId   string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
}

func (m *VendorRegisterRequest) Reset()                    { *m = VendorRegisterRequest{} }
func (m *VendorRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*VendorRegisterRequest) ProtoMessage()               {}
func (*VendorRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VendorRegisterRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

func (m *VendorRegisterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VendorRegisterRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VendorRegisterRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type VendorRegisterResponse struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	EntityCode string `protobuf:"bytes,2,opt,name=entity_code,json=entityCode" json:"entity_code,omitempty"`
	Secret     string `protobuf:"bytes,3,opt,name=secret" json:"secret,omitempty"`
}

func (m *VendorRegisterResponse) Reset()                    { *m = VendorRegisterResponse{} }
func (m *VendorRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*VendorRegisterResponse) ProtoMessage()               {}
func (*VendorRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *VendorRegisterResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VendorRegisterResponse) GetEntityCode() string {
	if m != nil {
		return m.EntityCode
	}
	return ""
}

func (m *VendorRegisterResponse) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

type VendorResponse struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	EntityCode  string `protobuf:"bytes,4,opt,name=entity_code,json=entityCode" json:"entity_code,omitempty"`
}

func (m *VendorResponse) Reset()                    { *m = VendorResponse{} }
func (m *VendorResponse) String() string            { return proto.CompactTextString(m) }
func (*VendorResponse) ProtoMessage()               {}
func (*VendorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *VendorResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VendorResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VendorResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VendorResponse) GetEntityCode() string {
	if m != nil {
		return m.EntityCode
	}
	return ""
}

type VendorUpdateRequest struct {
	Id          string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *VendorUpdateRequest) Reset()                    { *m = VendorUpdateRequest{} }
func (m *VendorUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*VendorUpdateRequest) ProtoMessage()               {}
func (*VendorUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VendorUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VendorUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VendorUpdateRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type VendorListRequest struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId" json:"project_id,omitempty"`
}

func (m *VendorListRequest) Reset()                    { *m = VendorListRequest{} }
func (m *VendorListRequest) String() string            { return proto.CompactTextString(m) }
func (*VendorListRequest) ProtoMessage()               {}
func (*VendorListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VendorListRequest) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

type VendorUpdateResponse struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Updated bool   `protobuf:"varint,2,opt,name=updated" json:"updated,omitempty"`
}

func (m *VendorUpdateResponse) Reset()                    { *m = VendorUpdateResponse{} }
func (m *VendorUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*VendorUpdateResponse) ProtoMessage()               {}
func (*VendorUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VendorUpdateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *VendorUpdateResponse) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

type VendorsResponse struct {
	Vendors []*VendorResponse `protobuf:"bytes,1,rep,name=vendors" json:"vendors,omitempty"`
}

func (m *VendorsResponse) Reset()                    { *m = VendorsResponse{} }
func (m *VendorsResponse) String() string            { return proto.CompactTextString(m) }
func (*VendorsResponse) ProtoMessage()               {}
func (*VendorsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VendorsResponse) GetVendors() []*VendorResponse {
	if m != nil {
		return m.Vendors
	}
	return nil
}

type AppRequest struct {
	VendorId    string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	IncludeYaml bool   `protobuf:"varint,3,opt,name=include_yaml,json=includeYaml" json:"include_yaml,omitempty"`
}

func (m *AppRequest) Reset()                    { *m = AppRequest{} }
func (m *AppRequest) String() string            { return proto.CompactTextString(m) }
func (*AppRequest) ProtoMessage()               {}
func (*AppRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AppRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppRequest) GetIncludeYaml() bool {
	if m != nil {
		return m.IncludeYaml
	}
	return false
}

type AppsRetrieveRequest struct {
	Request  []*AppRequest `protobuf:"bytes,1,rep,name=request" json:"request,omitempty"`
	Language string        `protobuf:"bytes,2,opt,name=language" json:"language,omitempty"`
}

func (m *AppsRetrieveRequest) Reset()                    { *m = AppsRetrieveRequest{} }
func (m *AppsRetrieveRequest) String() string            { return proto.CompactTextString(m) }
func (*AppsRetrieveRequest) ProtoMessage()               {}
func (*AppsRetrieveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AppsRetrieveRequest) GetRequest() []*AppRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AppsRetrieveRequest) GetLanguage() string {
	if m != nil {
		return m.Language
	}
	return ""
}

type AppSummaryResponse struct {
	VendorId    string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Category    string `protobuf:"bytes,5,opt,name=category" json:"category,omitempty"`
	Group       string `protobuf:"bytes,6,opt,name=group" json:"group,omitempty"`
	Icon        string `protobuf:"bytes,7,opt,name=icon" json:"icon,omitempty"`
	AppType     string `protobuf:"bytes,8,opt,name=app_type,json=appType" json:"app_type,omitempty"`
}

func (m *AppSummaryResponse) Reset()                    { *m = AppSummaryResponse{} }
func (m *AppSummaryResponse) String() string            { return proto.CompactTextString(m) }
func (*AppSummaryResponse) ProtoMessage()               {}
func (*AppSummaryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AppSummaryResponse) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppSummaryResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppSummaryResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppSummaryResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AppSummaryResponse) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *AppSummaryResponse) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *AppSummaryResponse) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *AppSummaryResponse) GetAppType() string {
	if m != nil {
		return m.AppType
	}
	return ""
}

type AppResponse struct {
	VendorId       string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	DefinitionYaml string `protobuf:"bytes,3,opt,name=definition_yaml,json=definitionYaml" json:"definition_yaml,omitempty"`
}

func (m *AppResponse) Reset()                    { *m = AppResponse{} }
func (m *AppResponse) String() string            { return proto.CompactTextString(m) }
func (*AppResponse) ProtoMessage()               {}
func (*AppResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AppResponse) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppResponse) GetDefinitionYaml() string {
	if m != nil {
		return m.DefinitionYaml
	}
	return ""
}

type AppSummariesResponse struct {
	Apps []*AppSummaryResponse `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (m *AppSummariesResponse) Reset()                    { *m = AppSummariesResponse{} }
func (m *AppSummariesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppSummariesResponse) ProtoMessage()               {}
func (*AppSummariesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AppSummariesResponse) GetApps() []*AppSummaryResponse {
	if m != nil {
		return m.Apps
	}
	return nil
}

type AppsResponse struct {
	Apps []*AppResponse `protobuf:"bytes,1,rep,name=apps" json:"apps,omitempty"`
}

func (m *AppsResponse) Reset()                    { *m = AppsResponse{} }
func (m *AppsResponse) String() string            { return proto.CompactTextString(m) }
func (*AppsResponse) ProtoMessage()               {}
func (*AppsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AppsResponse) GetApps() []*AppResponse {
	if m != nil {
		return m.Apps
	}
	return nil
}

type AppListRequest struct {
	VendorId    string        `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	IncludeYaml bool          `protobuf:"varint,2,opt,name=include_yaml,json=includeYaml" json:"include_yaml,omitempty"`
	Filter      []*AppRequest `protobuf:"bytes,3,rep,name=filter" json:"filter,omitempty"`
}

func (m *AppListRequest) Reset()                    { *m = AppListRequest{} }
func (m *AppListRequest) String() string            { return proto.CompactTextString(m) }
func (*AppListRequest) ProtoMessage()               {}
func (*AppListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AppListRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppListRequest) GetIncludeYaml() bool {
	if m != nil {
		return m.IncludeYaml
	}
	return false
}

func (m *AppListRequest) GetFilter() []*AppRequest {
	if m != nil {
		return m.Filter
	}
	return nil
}

type AppRegisterRequest struct {
	VendorId       string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	VendorSecret   string `protobuf:"bytes,3,opt,name=vendor_secret,json=vendorSecret" json:"vendor_secret,omitempty"`
	DefinitionYaml string `protobuf:"bytes,4,opt,name=definition_yaml,json=definitionYaml" json:"definition_yaml,omitempty"`
}

func (m *AppRegisterRequest) Reset()                    { *m = AppRegisterRequest{} }
func (m *AppRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*AppRegisterRequest) ProtoMessage()               {}
func (*AppRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AppRegisterRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppRegisterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppRegisterRequest) GetVendorSecret() string {
	if m != nil {
		return m.VendorSecret
	}
	return ""
}

func (m *AppRegisterRequest) GetDefinitionYaml() string {
	if m != nil {
		return m.DefinitionYaml
	}
	return ""
}

type AppRegisterResponse struct {
	VendorId   string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	EntityCode string `protobuf:"bytes,3,opt,name=entity_code,json=entityCode" json:"entity_code,omitempty"`
}

func (m *AppRegisterResponse) Reset()                    { *m = AppRegisterResponse{} }
func (m *AppRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*AppRegisterResponse) ProtoMessage()               {}
func (*AppRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AppRegisterResponse) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppRegisterResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppRegisterResponse) GetEntityCode() string {
	if m != nil {
		return m.EntityCode
	}
	return ""
}

type AppUpdateRequest struct {
	VendorId       string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	DefinitionYaml string `protobuf:"bytes,3,opt,name=definition_yaml,json=definitionYaml" json:"definition_yaml,omitempty"`
}

func (m *AppUpdateRequest) Reset()                    { *m = AppUpdateRequest{} }
func (m *AppUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*AppUpdateRequest) ProtoMessage()               {}
func (*AppUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AppUpdateRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppUpdateRequest) GetDefinitionYaml() string {
	if m != nil {
		return m.DefinitionYaml
	}
	return ""
}

type AppUpdateResponse struct {
	VendorId string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Updated  bool   `protobuf:"varint,3,opt,name=updated" json:"updated,omitempty"`
}

func (m *AppUpdateResponse) Reset()                    { *m = AppUpdateResponse{} }
func (m *AppUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*AppUpdateResponse) ProtoMessage()               {}
func (*AppUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AppUpdateResponse) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *AppUpdateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AppUpdateResponse) GetUpdated() bool {
	if m != nil {
		return m.Updated
	}
	return false
}

type GroupRequest struct {
	VendorId    string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	IncludeYaml bool   `protobuf:"varint,3,opt,name=include_yaml,json=includeYaml" json:"include_yaml,omitempty"`
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GroupRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *GroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupRequest) GetIncludeYaml() bool {
	if m != nil {
		return m.IncludeYaml
	}
	return false
}

type GroupResponse struct {
	VendorId       string   `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id             string   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	AppIds         []string `protobuf:"bytes,3,rep,name=app_ids,json=appIds" json:"app_ids,omitempty"`
	DefinitionYaml string   `protobuf:"bytes,4,opt,name=definition_yaml,json=definitionYaml" json:"definition_yaml,omitempty"`
}

func (m *GroupResponse) Reset()                    { *m = GroupResponse{} }
func (m *GroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupResponse) ProtoMessage()               {}
func (*GroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GroupResponse) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *GroupResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupResponse) GetAppIds() []string {
	if m != nil {
		return m.AppIds
	}
	return nil
}

func (m *GroupResponse) GetDefinitionYaml() string {
	if m != nil {
		return m.DefinitionYaml
	}
	return ""
}

type GroupsResponse struct {
	Groups []*GroupResponse `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *GroupsResponse) Reset()                    { *m = GroupsResponse{} }
func (m *GroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupsResponse) ProtoMessage()               {}
func (*GroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GroupsResponse) GetGroups() []*GroupResponse {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GroupListRequest struct {
	VendorId string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
}

func (m *GroupListRequest) Reset()                    { *m = GroupListRequest{} }
func (m *GroupListRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupListRequest) ProtoMessage()               {}
func (*GroupListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GroupListRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

type GroupRegisterRequest struct {
	VendorId       string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	VendorSecret   string `protobuf:"bytes,3,opt,name=vendor_secret,json=vendorSecret" json:"vendor_secret,omitempty"`
	DefinitionYaml string `protobuf:"bytes,4,opt,name=definition_yaml,json=definitionYaml" json:"definition_yaml,omitempty"`
}

func (m *GroupRegisterRequest) Reset()                    { *m = GroupRegisterRequest{} }
func (m *GroupRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRegisterRequest) ProtoMessage()               {}
func (*GroupRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GroupRegisterRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *GroupRegisterRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupRegisterRequest) GetVendorSecret() string {
	if m != nil {
		return m.VendorSecret
	}
	return ""
}

func (m *GroupRegisterRequest) GetDefinitionYaml() string {
	if m != nil {
		return m.DefinitionYaml
	}
	return ""
}

type GroupUpdateRequest struct {
	VendorId       string `protobuf:"bytes,1,opt,name=vendor_id,json=vendorId" json:"vendor_id,omitempty"`
	Id             string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	DefinitionYaml string `protobuf:"bytes,3,opt,name=definition_yaml,json=definitionYaml" json:"definition_yaml,omitempty"`
}

func (m *GroupUpdateRequest) Reset()                    { *m = GroupUpdateRequest{} }
func (m *GroupUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupUpdateRequest) ProtoMessage()               {}
func (*GroupUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *GroupUpdateRequest) GetVendorId() string {
	if m != nil {
		return m.VendorId
	}
	return ""
}

func (m *GroupUpdateRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupUpdateRequest) GetDefinitionYaml() string {
	if m != nil {
		return m.DefinitionYaml
	}
	return ""
}

func init() {
	proto.RegisterType((*VendorRequest)(nil), "undercroft.VendorRequest")
	proto.RegisterType((*VendorRegisterRequest)(nil), "undercroft.VendorRegisterRequest")
	proto.RegisterType((*VendorRegisterResponse)(nil), "undercroft.VendorRegisterResponse")
	proto.RegisterType((*VendorResponse)(nil), "undercroft.VendorResponse")
	proto.RegisterType((*VendorUpdateRequest)(nil), "undercroft.VendorUpdateRequest")
	proto.RegisterType((*VendorListRequest)(nil), "undercroft.VendorListRequest")
	proto.RegisterType((*VendorUpdateResponse)(nil), "undercroft.VendorUpdateResponse")
	proto.RegisterType((*VendorsResponse)(nil), "undercroft.VendorsResponse")
	proto.RegisterType((*AppRequest)(nil), "undercroft.AppRequest")
	proto.RegisterType((*AppsRetrieveRequest)(nil), "undercroft.AppsRetrieveRequest")
	proto.RegisterType((*AppSummaryResponse)(nil), "undercroft.AppSummaryResponse")
	proto.RegisterType((*AppResponse)(nil), "undercroft.AppResponse")
	proto.RegisterType((*AppSummariesResponse)(nil), "undercroft.AppSummariesResponse")
	proto.RegisterType((*AppsResponse)(nil), "undercroft.AppsResponse")
	proto.RegisterType((*AppListRequest)(nil), "undercroft.AppListRequest")
	proto.RegisterType((*AppRegisterRequest)(nil), "undercroft.AppRegisterRequest")
	proto.RegisterType((*AppRegisterResponse)(nil), "undercroft.AppRegisterResponse")
	proto.RegisterType((*AppUpdateRequest)(nil), "undercroft.AppUpdateRequest")
	proto.RegisterType((*AppUpdateResponse)(nil), "undercroft.AppUpdateResponse")
	proto.RegisterType((*GroupRequest)(nil), "undercroft.GroupRequest")
	proto.RegisterType((*GroupResponse)(nil), "undercroft.GroupResponse")
	proto.RegisterType((*GroupsResponse)(nil), "undercroft.GroupsResponse")
	proto.RegisterType((*GroupListRequest)(nil), "undercroft.GroupListRequest")
	proto.RegisterType((*GroupRegisterRequest)(nil), "undercroft.GroupRegisterRequest")
	proto.RegisterType((*GroupUpdateRequest)(nil), "undercroft.GroupUpdateRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Undercroft service

type UndercroftClient interface {
	RetrieveVendor(ctx context.Context, in *VendorRequest, opts ...grpc.CallOption) (*VendorResponse, error)
	UpdateVendor(ctx context.Context, in *VendorUpdateRequest, opts ...grpc.CallOption) (*VendorUpdateResponse, error)
	RegisterVendor(ctx context.Context, in *VendorRegisterRequest, opts ...grpc.CallOption) (*VendorRegisterResponse, error)
	ListVendors(ctx context.Context, in *VendorListRequest, opts ...grpc.CallOption) (*VendorsResponse, error)
	RetrieveApp(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error)
	ListApps(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppsResponse, error)
	RetrieveApps(ctx context.Context, in *AppsRetrieveRequest, opts ...grpc.CallOption) (*AppSummariesResponse, error)
	RegisterApp(ctx context.Context, in *AppRegisterRequest, opts ...grpc.CallOption) (*AppRegisterResponse, error)
	UpdateApp(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpdateResponse, error)
	RetrieveGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	ListGroups(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupsResponse, error)
	RegisterGroup(ctx context.Context, in *GroupRegisterRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	UpdateGroup(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*GroupResponse, error)
}

type undercroftClient struct {
	cc *grpc.ClientConn
}

func NewUndercroftClient(cc *grpc.ClientConn) UndercroftClient {
	return &undercroftClient{cc}
}

func (c *undercroftClient) RetrieveVendor(ctx context.Context, in *VendorRequest, opts ...grpc.CallOption) (*VendorResponse, error) {
	out := new(VendorResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/RetrieveVendor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) UpdateVendor(ctx context.Context, in *VendorUpdateRequest, opts ...grpc.CallOption) (*VendorUpdateResponse, error) {
	out := new(VendorUpdateResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/UpdateVendor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) RegisterVendor(ctx context.Context, in *VendorRegisterRequest, opts ...grpc.CallOption) (*VendorRegisterResponse, error) {
	out := new(VendorRegisterResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/RegisterVendor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) ListVendors(ctx context.Context, in *VendorListRequest, opts ...grpc.CallOption) (*VendorsResponse, error) {
	out := new(VendorsResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/ListVendors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) RetrieveApp(ctx context.Context, in *AppRequest, opts ...grpc.CallOption) (*AppResponse, error) {
	out := new(AppResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/RetrieveApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) ListApps(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppsResponse, error) {
	out := new(AppsResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/ListApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) RetrieveApps(ctx context.Context, in *AppsRetrieveRequest, opts ...grpc.CallOption) (*AppSummariesResponse, error) {
	out := new(AppSummariesResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/RetrieveApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) RegisterApp(ctx context.Context, in *AppRegisterRequest, opts ...grpc.CallOption) (*AppRegisterResponse, error) {
	out := new(AppRegisterResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/RegisterApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) UpdateApp(ctx context.Context, in *AppUpdateRequest, opts ...grpc.CallOption) (*AppUpdateResponse, error) {
	out := new(AppUpdateResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/UpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) RetrieveGroup(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/RetrieveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) ListGroups(ctx context.Context, in *GroupListRequest, opts ...grpc.CallOption) (*GroupsResponse, error) {
	out := new(GroupsResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) RegisterGroup(ctx context.Context, in *GroupRegisterRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/RegisterGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *undercroftClient) UpdateGroup(ctx context.Context, in *GroupUpdateRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/undercroft.Undercroft/UpdateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Undercroft service

type UndercroftServer interface {
	RetrieveVendor(context.Context, *VendorRequest) (*VendorResponse, error)
	UpdateVendor(context.Context, *VendorUpdateRequest) (*VendorUpdateResponse, error)
	RegisterVendor(context.Context, *VendorRegisterRequest) (*VendorRegisterResponse, error)
	ListVendors(context.Context, *VendorListRequest) (*VendorsResponse, error)
	RetrieveApp(context.Context, *AppRequest) (*AppResponse, error)
	ListApps(context.Context, *AppListRequest) (*AppsResponse, error)
	RetrieveApps(context.Context, *AppsRetrieveRequest) (*AppSummariesResponse, error)
	RegisterApp(context.Context, *AppRegisterRequest) (*AppRegisterResponse, error)
	UpdateApp(context.Context, *AppUpdateRequest) (*AppUpdateResponse, error)
	RetrieveGroup(context.Context, *GroupRequest) (*GroupResponse, error)
	ListGroups(context.Context, *GroupListRequest) (*GroupsResponse, error)
	RegisterGroup(context.Context, *GroupRegisterRequest) (*GroupResponse, error)
	UpdateGroup(context.Context, *GroupUpdateRequest) (*GroupResponse, error)
}

func RegisterUndercroftServer(s *grpc.Server, srv UndercroftServer) {
	s.RegisterService(&_Undercroft_serviceDesc, srv)
}

func _Undercroft_RetrieveVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).RetrieveVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/RetrieveVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).RetrieveVendor(ctx, req.(*VendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_UpdateVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).UpdateVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/UpdateVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).UpdateVendor(ctx, req.(*VendorUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_RegisterVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).RegisterVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/RegisterVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).RegisterVendor(ctx, req.(*VendorRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_ListVendors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VendorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).ListVendors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/ListVendors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).ListVendors(ctx, req.(*VendorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_RetrieveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).RetrieveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/RetrieveApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).RetrieveApp(ctx, req.(*AppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).ListApps(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_RetrieveApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppsRetrieveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).RetrieveApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/RetrieveApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).RetrieveApps(ctx, req.(*AppsRetrieveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_RegisterApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).RegisterApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/RegisterApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).RegisterApp(ctx, req.(*AppRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).UpdateApp(ctx, req.(*AppUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_RetrieveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).RetrieveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/RetrieveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).RetrieveGroup(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).ListGroups(ctx, req.(*GroupListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_RegisterGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).RegisterGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/RegisterGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).RegisterGroup(ctx, req.(*GroupRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Undercroft_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UndercroftServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/undercroft.Undercroft/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UndercroftServer).UpdateGroup(ctx, req.(*GroupUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Undercroft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "undercroft.Undercroft",
	HandlerType: (*UndercroftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveVendor",
			Handler:    _Undercroft_RetrieveVendor_Handler,
		},
		{
			MethodName: "UpdateVendor",
			Handler:    _Undercroft_UpdateVendor_Handler,
		},
		{
			MethodName: "RegisterVendor",
			Handler:    _Undercroft_RegisterVendor_Handler,
		},
		{
			MethodName: "ListVendors",
			Handler:    _Undercroft_ListVendors_Handler,
		},
		{
			MethodName: "RetrieveApp",
			Handler:    _Undercroft_RetrieveApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _Undercroft_ListApps_Handler,
		},
		{
			MethodName: "RetrieveApps",
			Handler:    _Undercroft_RetrieveApps_Handler,
		},
		{
			MethodName: "RegisterApp",
			Handler:    _Undercroft_RegisterApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Undercroft_UpdateApp_Handler,
		},
		{
			MethodName: "RetrieveGroup",
			Handler:    _Undercroft_RetrieveGroup_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _Undercroft_ListGroups_Handler,
		},
		{
			MethodName: "RegisterGroup",
			Handler:    _Undercroft_RegisterGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _Undercroft_UpdateGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "undercroft.proto",
}

func init() { proto.RegisterFile("undercroft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 961 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x57, 0xeb, 0x6e, 0xdc, 0x44,
	0x14, 0xd6, 0x5e, 0xba, 0x97, 0xe3, 0xcd, 0x36, 0x9d, 0x86, 0xd4, 0x71, 0x49, 0xb2, 0x1d, 0x10,
	0x54, 0x42, 0x24, 0xb0, 0xf0, 0x0f, 0x09, 0x75, 0x29, 0x22, 0x0d, 0xaa, 0x90, 0x70, 0x29, 0x88,
	0x82, 0x58, 0x39, 0xf6, 0x64, 0x3b, 0xd5, 0xae, 0x3d, 0xd8, 0xe3, 0xc2, 0x4a, 0x08, 0xf1, 0x06,
	0x88, 0xb7, 0xe3, 0x2f, 0x6f, 0x82, 0x3c, 0x33, 0xbe, 0x8c, 0x2f, 0xab, 0x64, 0xa5, 0x20, 0xfe,
	0xd9, 0x67, 0x8e, 0xbf, 0xf3, 0x9d, 0xef, 0x5c, 0x66, 0x17, 0x76, 0x63, 0xdf, 0x23, 0xa1, 0x1b,
	0x06, 0x97, 0xfc, 0x84, 0x85, 0x01, 0x0f, 0x10, 0xe4, 0x16, 0x7c, 0x0c, 0x3b, 0xdf, 0x12, 0xdf,
	0x0b, 0x42, 0x9b, 0xfc, 0x1c, 0x93, 0x88, 0xa3, 0x31, 0xb4, 0xa9, 0x67, 0xb6, 0x26, 0xad, 0x87,
	0x43, 0xbb, 0x4d, 0x3d, 0xfc, 0x1b, 0xbc, 0x91, 0x3a, 0x2c, 0x68, 0xc4, 0x49, 0xe6, 0x78, 0x08,
	0xc0, 0xc2, 0xe0, 0x15, 0x71, 0xf9, 0x3c, 0xfb, 0x60, 0xa8, 0x2c, 0xe7, 0x9e, 0xc2, 0x69, 0xa7,
	0x38, 0x08, 0x41, 0xd7, 0x77, 0x56, 0xc4, 0xec, 0x08, 0x8b, 0x78, 0x46, 0x13, 0x30, 0x3c, 0x12,
	0xb9, 0x21, 0x65, 0x9c, 0x06, 0xbe, 0xd9, 0x15, 0x47, 0x45, 0x13, 0x76, 0x60, 0xbf, 0x1c, 0x3d,
	0x62, 0x81, 0x1f, 0x91, 0x32, 0x4f, 0x74, 0x0c, 0x06, 0xf1, 0x39, 0xe5, 0xeb, 0xb9, 0x1b, 0x78,
	0x44, 0x05, 0x06, 0x69, 0x7a, 0x1c, 0x78, 0x04, 0xed, 0x43, 0x2f, 0x22, 0x6e, 0x48, 0xb8, 0xa2,
	0xa0, 0xde, 0xf0, 0x2f, 0x30, 0x4e, 0x43, 0x34, 0x40, 0xa7, 0xd4, 0xdb, 0xcd, 0xd4, 0x3b, 0x15,
	0xea, 0x65, 0x42, 0xdd, 0x32, 0x21, 0xfc, 0x03, 0xdc, 0x95, 0x81, 0x9f, 0x33, 0xcf, 0xe1, 0xa4,
	0xa1, 0x00, 0xdb, 0x45, 0xc7, 0x53, 0xb8, 0x23, 0xc1, 0x9f, 0xd2, 0x88, 0x5f, 0xad, 0x64, 0xf8,
	0x11, 0xec, 0xe9, 0x84, 0x1a, 0xf4, 0x30, 0xa1, 0x1f, 0x0b, 0x0f, 0x59, 0xdf, 0x81, 0x9d, 0xbe,
	0xe2, 0x33, 0xb8, 0x2d, 0x11, 0xa2, 0xec, 0xe3, 0x8f, 0xa1, 0xff, 0x5a, 0x9a, 0xcc, 0xd6, 0xa4,
	0xf3, 0xd0, 0x98, 0x5a, 0x27, 0x85, 0x86, 0xd4, 0x95, 0xb7, 0x53, 0x57, 0xfc, 0x23, 0xc0, 0x8c,
	0xb1, 0x94, 0xf7, 0x7d, 0x18, 0xca, 0x83, 0x9c, 0xf6, 0x40, 0x1a, 0x6a, 0x1a, 0xed, 0x01, 0x8c,
	0xa8, 0xef, 0x2e, 0x63, 0x8f, 0xcc, 0xd7, 0xce, 0x6a, 0x29, 0xc4, 0x19, 0xd8, 0x86, 0xb2, 0x7d,
	0xef, 0xac, 0x96, 0xd8, 0x85, 0xbb, 0x33, 0xc6, 0x22, 0x9b, 0xf0, 0x90, 0x92, 0xd7, 0x99, 0xf2,
	0x1f, 0x40, 0x3f, 0x94, 0x8f, 0x8a, 0xea, 0x7e, 0x91, 0x6a, 0xce, 0xc7, 0x4e, 0xdd, 0x90, 0x05,
	0x83, 0xa5, 0xe3, 0x2f, 0x62, 0x67, 0x91, 0xd6, 0x27, 0x7b, 0xc7, 0x7f, 0xb7, 0x00, 0xcd, 0x18,
	0x7b, 0x16, 0xaf, 0x56, 0x4e, 0xb8, 0xce, 0xf4, 0xb8, 0x56, 0x2e, 0x5b, 0x0d, 0x4d, 0xc2, 0xca,
	0x75, 0x38, 0x59, 0x04, 0xe1, 0xda, 0xbc, 0x25, 0x23, 0xa4, 0xef, 0x68, 0x0f, 0x6e, 0x2d, 0xc2,
	0x20, 0x66, 0x66, 0x4f, 0x1c, 0xc8, 0x97, 0x24, 0x0e, 0x75, 0x03, 0xdf, 0xec, 0xcb, 0x38, 0xc9,
	0x33, 0x3a, 0x80, 0x81, 0xc3, 0xd8, 0x9c, 0xaf, 0x19, 0x31, 0x07, 0xc2, 0xde, 0x77, 0x18, 0xfb,
	0x66, 0xcd, 0x08, 0x76, 0xc1, 0x10, 0x6a, 0x6c, 0x93, 0xd2, 0xbb, 0x70, 0xdb, 0x23, 0x97, 0xd4,
	0xa7, 0x09, 0xd5, 0xbc, 0x42, 0x43, 0x7b, 0x9c, 0x9b, 0x45, 0x91, 0xbe, 0x84, 0xbd, 0x4c, 0x3e,
	0x4a, 0xf2, 0x86, 0x9a, 0x42, 0xd7, 0x61, 0x2c, 0xed, 0xa6, 0xa3, 0x52, 0x89, 0x4a, 0x72, 0xdb,
	0xc2, 0x17, 0x7f, 0x02, 0x23, 0x59, 0x70, 0x85, 0xf1, 0x9e, 0x86, 0x71, 0xaf, 0x52, 0x66, 0xed,
	0xe3, 0x3f, 0x5a, 0x30, 0x9e, 0x31, 0x56, 0x1c, 0xa4, 0x8d, 0x19, 0x97, 0x1b, 0xb0, 0x5d, 0x69,
	0x40, 0x74, 0x02, 0xbd, 0x4b, 0xba, 0xe4, 0x24, 0x34, 0x3b, 0x1b, 0x1b, 0x4d, 0x79, 0xe1, 0x3f,
	0x65, 0x2f, 0x95, 0x57, 0xf0, 0xb5, 0x84, 0x7f, 0x0b, 0x76, 0x94, 0xb3, 0xb6, 0x06, 0x47, 0xd2,
	0xf8, 0x4c, 0xd8, 0xea, 0xaa, 0xd3, 0xad, 0xad, 0x8e, 0x1c, 0xa1, 0xca, 0x56, 0xbe, 0x16, 0xa3,
	0xd2, 0x86, 0xec, 0x54, 0x36, 0xe4, 0x4b, 0xd8, 0x9d, 0x31, 0xa6, 0xaf, 0xc7, 0x9b, 0x69, 0xb6,
	0x17, 0x70, 0xa7, 0x10, 0x69, 0x9b, 0x64, 0x0a, 0x4b, 0xb1, 0xa3, 0x2f, 0xc5, 0x9f, 0x60, 0x74,
	0x96, 0x4c, 0xd9, 0x4d, 0x6d, 0xb3, 0xdf, 0x61, 0x47, 0xe1, 0x6f, 0xc3, 0xfb, 0x1e, 0x24, 0x63,
	0x3d, 0xa7, 0x5e, 0x24, 0x7a, 0x71, 0x68, 0xf7, 0x1c, 0xc6, 0xce, 0xbd, 0xe8, 0xea, 0xad, 0xf0,
	0x18, 0xc6, 0x22, 0x7e, 0x3e, 0x5e, 0x1f, 0x42, 0x4f, 0xec, 0x95, 0x74, 0xc0, 0x0e, 0x8a, 0xed,
	0xad, 0x71, 0xb5, 0x95, 0x23, 0x3e, 0x85, 0x5d, 0x71, 0x70, 0xd5, 0x29, 0xc3, 0x7f, 0xb5, 0x60,
	0x4f, 0x41, 0xfd, 0x6f, 0x86, 0xe2, 0x15, 0x20, 0x41, 0xe9, 0x3f, 0xe8, 0xd8, 0xe9, 0x3f, 0x7d,
	0x80, 0xe7, 0x99, 0xaa, 0xe8, 0x0c, 0xc6, 0xe9, 0x75, 0x26, 0xef, 0x54, 0x74, 0x50, 0x77, 0xcf,
	0x0a, 0x46, 0xd6, 0x86, 0x2b, 0x18, 0x7d, 0x0d, 0x23, 0x49, 0x5f, 0xc1, 0x1c, 0x57, 0x7d, 0xb5,
	0xf4, 0xac, 0x49, 0xb3, 0x83, 0x82, 0xfc, 0x2e, 0xe1, 0x26, 0x8b, 0xa4, 0x40, 0x1f, 0xd4, 0x11,
	0xd0, 0xca, 0x68, 0xe1, 0x4d, 0x2e, 0x0a, 0xf8, 0x1c, 0x8c, 0xa4, 0x5f, 0xd4, 0x4f, 0x0e, 0x74,
	0x58, 0xfd, 0xa4, 0xd0, 0x4e, 0xd6, 0xfd, 0xea, 0x71, 0xde, 0xb2, 0x9f, 0x82, 0x91, 0xea, 0x37,
	0x63, 0x0c, 0x35, 0x2c, 0x64, 0xab, 0xe9, 0xaa, 0x40, 0x8f, 0x60, 0x90, 0xc4, 0x4a, 0x6e, 0x19,
	0x64, 0x95, 0x9c, 0x8a, 0x24, 0xcc, 0xd2, 0x59, 0x54, 0x14, 0xbe, 0xc0, 0x20, 0xd2, 0x85, 0xaf,
	0xf9, 0xb9, 0xa2, 0x0b, 0x5f, 0x7b, 0x55, 0x7e, 0x95, 0x24, 0x25, 0x35, 0x4b, 0x92, 0x3a, 0xaa,
	0x90, 0xd7, 0x25, 0x3f, 0x6e, 0x3c, 0x57, 0x78, 0x4f, 0x60, 0x28, 0x4b, 0x9b, 0xa0, 0xbd, 0x59,
	0xf2, 0xd6, 0xbb, 0xe2, 0xb0, 0xe1, 0x54, 0x21, 0x7d, 0x0e, 0x3b, 0x69, 0x3a, 0x62, 0x62, 0x90,
	0x59, 0xb3, 0x22, 0x24, 0x52, 0xf3, 0xf2, 0x40, 0x5f, 0x00, 0x24, 0xda, 0xca, 0xed, 0xa3, 0x13,
	0x2a, 0x2f, 0x13, 0xbd, 0xe7, 0x4b, 0xfb, 0xea, 0x69, 0xc2, 0x46, 0xe6, 0x2a, 0xd9, 0x4c, 0x6a,
	0x62, 0xea, 0x5a, 0x6d, 0x60, 0xf5, 0x04, 0x0c, 0x99, 0xad, 0xc4, 0x3a, 0xaa, 0x78, 0xea, 0x4a,
	0x35, 0x23, 0x7d, 0xf6, 0xce, 0x8b, 0xb7, 0x17, 0x94, 0xbf, 0x8c, 0x2f, 0x4e, 0xdc, 0x60, 0x75,
	0xea, 0xc6, 0x17, 0xe4, 0xd7, 0x53, 0xf1, 0x17, 0xee, 0xfd, 0x45, 0x70, 0x9a, 0x7f, 0x75, 0xd1,
	0x13, 0xc6, 0x8f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x47, 0xe6, 0x33, 0x02, 0xeb, 0x0d, 0x00,
	0x00,
}
